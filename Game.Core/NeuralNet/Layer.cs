using System;
using System.Collections.Generic;
using System.Linq;

namespace Game.Core.NeuralNet
{
  /// <summary>
  ///   Represents a layer of neurons in a neural network.
  /// </summary>
  public class Layer
  {
    private readonly List<NeuronBase> m_neurons;
    private readonly List<float> m_outputs;

    /// <summary>
    ///   Construct an empty layer.
    /// </summary>
    /// <param name="network"></param>
    /// <param name="index"></param>
    /// <param name="numInputs"></param>
    /// <exception cref="ArgumentNullException">
    ///   network is null
    /// </exception>
    /// <exception cref="ArgumentOutOfRangeException">
    ///   index is less than 0
    ///   -or-
    ///   numInputs is 0 or less
    /// </exception>
    public Layer(Network network, int index, int numInputs)
    {
      if (network == null) throw new ArgumentNullException("network");
      if (index < 0) throw new ArgumentOutOfRangeException("index");
      if (numInputs <= 0) throw new ArgumentOutOfRangeException("numInputs");

      Network = network;
      Index = index;
      NumInputs = numInputs;
      Inputs = new List<float>(Enumerable.Repeat(0f, NumInputs));
      m_neurons = new List<NeuronBase>();
      m_outputs = new List<float>();
    }

    /// <summary>
    ///   Get the network that contains the layer.
    /// </summary>
    public Network Network { get; private set; }

    /// <summary>
    ///   Get the layer's position in the network.
    /// </summary>
    public int Index { get; private set; }

    /// <summary>
    ///   Get the number of inputs expected by neurons in the layer.
    /// </summary>
    public int NumInputs { get; private set; }

    /// <summary>
    ///   Get the number of outputs generated by the layer.
    /// </summary>
    public int NumOutputs
    {
      get { return m_outputs.Count; }
    }

    /// <summary>
    ///   Get the neurons in the layer.
    /// </summary>
    public IReadOnlyList<NeuronBase> Neurons
    {
      get { return m_neurons; }
    }

    /// <summary>
    ///   Get the last inputs received by the layer.
    /// </summary>
    public IList<float> Inputs { get; private set; }

    /// <summary>
    ///   Get the last outputs calculated by the layer.
    /// </summary>
    public IReadOnlyList<float> Outputs
    {
      get { return m_outputs; }
    }

    /// <summary>
    ///   Adds a neuron to the layer.
    /// </summary>
    /// <param name="neuron"></param>
    /// <exception cref="ArgumentNullException">
    ///   neuron is null
    /// </exception>
    /// <exception cref="InvalidOperationException">
    ///   The number of inputs for neuron does not match the number of inputs
    ///   for this layer.
    /// </exception>
    public void AddNeuron(NeuronBase neuron)
    {
      if (neuron == null) throw new ArgumentNullException("neuron");
      if (neuron.NumInputs != NumInputs)
        throw new InvalidOperationException(string.Format(
          "Expected {0} inputs, neuron had {1}", NumInputs, neuron.NumInputs));

      m_neurons.Add(neuron);
      m_outputs.Add(0f);
    }

    /// <summary>
    ///   Updates all neurons in the layer.  You must set <see cref="Inputs"/> 
    ///   before calling this method.  <see cref="Outputs"/> is updated with 
    ///   the outputs of the neurons.
    /// </summary>
    /// <exception cref="InvalidOperationException">
    ///   The layer has no neurons.
    /// </exception>
    public void Update()
    {
      if (!Neurons.Any()) 
        throw new InvalidOperationException("No neurons in the layer");

      for (var i = 0; i < Neurons.Count; i++)
      {
        Neurons[i].Update();
        m_outputs[i] = Neurons[i].Output;
      }
    }
  }
}
